---
title: "Prepare Survey data for S2 main CAM study"
author: "Julius Fenn, Louisa Estadieu"
format:
  html:
    toc: true
    toc-depth: 3
    html-math-method: katex
---



# Notes


# load cleaned data files

```{r}
#| label: load cleaned data files
#| warning: false

# sets the directory of location of this script as the current directory
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))

### load packages
require(pacman)
p_load('tidyverse', 'jsonlite', 'magrittr', 'xlsx',
       'stargazer', 'psych', 'jtools', 'DT', 'ggstatsplot', 
       'lavaan', 
       'regsem', 'MplusAutomation', 'igraph')


setwd("outputs/01_dataPreperation/final")


### load questionnaire
questionnaire <- readRDS(file = "questionnaire_final.rds")


networkIndicators_pre <- readRDS(file = "networkIndicators_pre_clean_final.rds")
networkIndicators_post <- readRDS(file = "networkIndicators_post_clean_final.rds")


CAMfiles_combined <- readRDS(file = "CAMfiles_combined_clean_final.rds")


### load functions
# print(getwd())
setwd("../../../../../functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}


setwd("../functions_CAMapp")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}
rm(i)



### summary function
data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      se = sd(x[[col]], na.rm=TRUE) / sqrt(length(x[[col]])))
  }
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- plyr::rename(data_sum, c("mean" = varname))
  return(data_sum)
}
```



# check single scales and compute mean variables


## Almere

### Anxiety dimension


```{r}
#| label: Almere Anxiety
#| warning: false

regEx <- "^Almere.*anx$"
nameScale <- "Almere - Anxiety"
nameVariable <- "mean_AlmereAnxiety"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


### Attitude dimension


```{r}
#| label: Almere Attitude
#| warning: false

regEx <- "^Almere.*att$"
nameScale <- "Almere - Attitude"
nameVariable <- "mean_AlmereAttitude"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```

## Li & Wang (2021)

### Anthropomorphism dimension


```{r}
#| label: Li & Wang Anthropomorphism
#| warning: false

regEx <- "^LiWang.*anthropomorphism$"
nameScale <- "LiWang - Anthropomorphism"
nameVariable <- "mean_LiWangAnthropomorphism"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


### Autonomy dimension


```{r}
#| label: Li & Wang Autonomy
#| warning: false

regEx <- "^LiWang.*autonomy$"
nameScale <- "LiWang - Autonomy"
nameVariable <- "mean_LiWangAutonomy"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```



## General Attitudes Towards Robots Scale, GAToRS (2022)

### Personal Level Positive Attitude

```{r}
#| label: GAToRS PP
#| warning: false

regEx <- "^GAToRS.*pp$"
nameScale <- "GAToRS - PP"
nameVariable <- "mean_GAToRSpp"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


### Personal Level Negative Attitude

```{r}
#| label: GAToRS PN
#| warning: false

regEx <- "^GAToRS.*pn$"
nameScale <- "GAToRS - pn"
nameVariable <- "mean_GAToRSpn"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```

### Societal Level Positive Attitude

```{r}
#| label: GAToRS SP
#| warning: false

regEx <- "^GAToRS.*sp$"
nameScale <- "GAToRS - sp"
nameVariable <- "mean_GAToRSsp"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


### Societal Level Negative Attitude

```{r}
#| label: GAToRS SN
#| warning: false

regEx <- "^GAToRS.*sn$"
nameScale <- "GAToRS - sn"
nameVariable <- "mean_GAToRSsn"

### number of items
sum(str_detect(string = colnames(questionnaire), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaire, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaire[[nameVariable]]  <- questionnaire %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```







# analysis

## correlation mean variables

```{r}
psych::cor.plot(r = cor(questionnaire[, str_detect(string = colnames(questionnaire),
                                                   pattern = "^mean")], 
                                                   use = "pairwise.complete.obs"),
                                                   upper = FALSE, xlas = 2, main = "mean scales")
```



## mean differences

```{r}
ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_AlmereAnxiety
)

ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_AlmereAttitude
)

ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_LiWangAnthropomorphism
)

ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_LiWangAutonomy
)

ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_GAToRSpp
)


ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_GAToRSpn
)

ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_GAToRSsp
)

ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_GAToRSsp
)


ggbetweenstats(
  data = questionnaire,
  x = choosen_Robot,
  y = mean_GAToRSsn
)
```

