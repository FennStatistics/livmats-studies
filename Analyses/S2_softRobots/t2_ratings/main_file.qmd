---
title: "Main File for S2 main CAM study"
author: "Julius Fenn, Louisa Estadieu"
format:
  html:
    toc: true
    toc-depth: 3
    html-math-method: katex
---

```{r}
#| echo: false
#| warning: false
#| results: hide

# sets the directory of location of this script as the current directory
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))

########################################
# load packages
########################################
require(pacman)
p_load('tidyverse', 'jsonlite', 'magrittr', 'xlsx',
       'stargazer', 'psych', 'jtools', 'DT', 'ggstatsplot', 
       'lavaan', 
       'regsem', 'MplusAutomation', 'igraph',
       'irr')

########################################
# list data files
########################################
setwd("data")
dir()

files <- list.files(pattern = "ratings")
files_rater <- list()

for(i in 1:length(files)){
  tmp <- xlsx::read.xlsx2(file = files[i], sheetIndex = 1)
  files_rater[[i]] <- tmp
  if(i == 1){
    dat <- tmp
  }else{
    dat <- rbind(dat, tmp)
  }
}

# categories_coding_guidelines

categories_CG <- xlsx::read.xlsx2(file = "categories_coding_guidelines.xlsx", sheetIndex = 1)

########################################
# load functions
########################################
# print(getwd())
setwd("../../../functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}


setwd("../functions_CAMapp")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}
rm(i)
```

# Notes


# clean data

Superordinate concepts of raters are written slightly differently.

```{r}
length(categories_CG$Category)
length(unique(dat$Superordinate))


table(dat$Superordinate)
```
Remove whitespaces

```{r}
dat$Superordinate <- str_trim(string = dat$Superordinate, side = "both")
length(unique(dat$Superordinate))
```


Loop over list coding guidelines using approximate matching

```{r}
vec_unique <-  unique(dat$Superordinate)
for(i in 1:length(vec_unique)){
  tmp <- stringdist::stringdist(a = categories_CG$Category, b = vec_unique[i])
  
  cat("i: ", i, "word: ", vec_unique[i], "\n", categories_CG$Category[tmp <= 2], "\n\n")

  if(length(categories_CG$Category[tmp <= 2]) == 1){
    dat$Superordinate[dat$Superordinate == vec_unique[i]] <- categories_CG$Category[tmp <= 2]
  }
}


length(unique(dat$Superordinate))
```


Set 4 ratings to missing:
* Social impact, pos./neg., 2 times
* Anthropomorphism, pos./neg., once
* empty, once

```{r}
sum(dat$Superordinate == "Social impact, pos./neg.", na.rm = TRUE)
sum(dat$Superordinate == "Anthropomorphism, pos./neg.", na.rm = TRUE)
sum(dat$Superordinate == "", na.rm = TRUE)


dat$Superordinate[dat$Superordinate == "Social impact, pos./neg."] <- NA
dat$Superordinate[dat$Superordinate == "Anthropomorphism, pos./neg."] <- NA
dat$Superordinate[dat$Superordinate == ""] <- NA
```
```{r}
length(categories_CG$Category)
length(unique(dat$Superordinate)) # plus missing


table(dat$Superordinate)
```


## same for files list

```{r}
for(i in 1:length(files_rater)) {
  # remove whitespaces
  files_rater[[i]]$Superordinate <-
    str_trim(string = files_rater[[i]]$Superordinate, side = "both")
  
  
  # Loop over list coding guidelines using approximate matching
  vec_unique <-  unique(files_rater[[i]]$Superordinate)
  for (j in 1:length(vec_unique)) {
    tmp <-
      stringdist::stringdist(a = categories_CG$Category, b = vec_unique[j])
    
    # cat("i: ", i, "word: ", vec_unique[i], "\n", categories_CG$Category[tmp <= 2], "\n\n")
    
    if (length(categories_CG$Category[tmp <= 2]) == 1) {
      files_rater[[i]]$Superordinate[files_rater[[i]]$Superordinate == vec_unique[j]] <-
        categories_CG$Category[tmp <= 2]
    }
  }
  
  
  # remove 3 ratings manually
  # files_rater[[i]]$Superordinate[files_rater[[i]]$Superordinate == "Social impact, pos./neg."] <-
  #   NA
  # files_rater[[i]]$Superordinate[files_rater[[i]]$Superordinate == "Anthropomorphism, pos./neg."] <-
  #   NA
  # files_rater[[i]]$Superordinate[files_rater[[i]]$Superordinate == ""] <-
  #   NA
}
```



# compute reliability coefficients

```{r}
### compute inter-rater coefficients


# addRatingColum(filesRater = files_rater)
cohensKappas <- computeCohensKappa(files = files_rater,
                                   numberRaters = length(files_rater))
cohensKappas



cohensKappasMaximized <- computeCohensKappaMaximized(files = files_rater,
                                                     numberRaters = length(files_rater))
cohensKappasMaximized
mean(colMeans(cohensKappasMaximized))
```
# see raw data

```{r}
setwd("data")
tmp_namesRater <- files <- list.files(pattern = "ratings")
setwd("..")
ovallRaterList <- getOverallRaterList(files = files_rater,
                                        orderAlphabetically = TRUE,
                                        raterNames = tmp_namesRater)

DT::datatable(ovallRaterList[,c("Words", str_subset(string = colnames(ovallRaterList), pattern = "Superordinate"))], options = list(pageLength = 5))
```


# compute percantage of overlap

```{r}
ovallRaterList$overlapNum <- NA
for(i in 1:nrow(ovallRaterList)){
ovallRaterList$overlapNum[i] <- max(table(unlist(ovallRaterList[i,c(str_subset(string = colnames(ovallRaterList), pattern = "Superordinate"))])))
}

## number raters
length(str_subset(string = colnames(ovallRaterList), pattern = "Superordinate"))


table(ovallRaterList$overlapNum)
barplot(table(ovallRaterList$overlapNum) / nrow(ovallRaterList) * 100)



DT::datatable(ovallRaterList[ovallRaterList$overlapNum >= 3,c("Words", str_subset(string = colnames(ovallRaterList), pattern = "Superordinate"))], options = list(pageLength = 5))


DT::datatable(ovallRaterList[ovallRaterList$overlapNum <= 2,c("Words", str_subset(string = colnames(ovallRaterList), pattern = "Superordinate"))], options = list(pageLength = 5))

```

```{r}
setwd("outputs")
dim(dat)
write.xlsx2(x = dat, file = "ovallRater_long.xlsx")
dim(ovallRaterList)
write.xlsx2(x = ovallRaterList, file = "ovallRater_wide.xlsx")
```
## words used

```{r}
tmp_words <- unique(dat$Superordinate)
tmp_words <- tmp_words[!is.na(tmp_words)]

mat <- matrix(data = NA, nrow = length(tmp_words), ncol = 3)
h = 1

for(w in tmp_words){
  tmp <- dat[dat$Superordinate %in% w,]
  tmp_overlap <- 
  mat[h,] <- c(nrow(tmp), 
               round(x = nrow(tmp) / nrow(dat) * 100, digits = 2),
               mean(table(tmp$Words)))
  h = h + 1
  
}

rownames(mat) <- tmp_words
colnames(mat) <- c("N", "percantage", "mean overlap")
mat

setwd("outputs")
stargazer(mat, type = "html", out = "table_words.html", summary = FALSE)
```


